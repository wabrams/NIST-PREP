/***************************************************************************//**
 * @file app.c
 * @brief Silicon Labs Empty Example Project
 *
 * This example demonstrates the bare minimum needed for a Blue Gecko C application
 * that allows Over-the-Air Device Firmware Upgrading (OTA DFU). The application
 * starts advertising after boot and restarts advertising after a connection is closed.
 *******************************************************************************
 * # License
 * <b>Copyright 2020 Silicon Laboratories Inc. www.silabs.com</b>
 *******************************************************************************
 *
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 ******************************************************************************/

/* Bluetooth stack headers */
#include "bg_types.h"
#include "native_gecko.h"
#include "gatt_db.h"

#include "app.h"
#include "em_cmu.h"
#include "em_prs.h"
#include "em_gpio.h"
#include "em_device.h"
#include "em_ldma.h"
#include "dmadrv.h"

#include "em_timer.h"

#include "gpiointerrupt.h"

#define RX_OBS_PRS_CHANNEL 0
#define TX_OBS_PRS_CHANNEL 1

volatile bool on_off = false;
void startLDMA(void);

void button0Callback(uint8_t pin) {
	printf("Button callback\r\n");
	startLDMA();
	TIMER_Enable(TIMER0, true);

	/*
	 *

	 on_off = !on_off;
	 if (on_off) {
	 //setupLDMA();
	 TIMER_Enable(TIMER0, on_off);
	 }
	 */
}

void initGpio(void) {
	// Configure PA6 as output
	//GPIO_PinModeSet(gpioPortA, 6, gpioModePushPull, 0);
	GPIO_PinModeSet(gpioPortD, 3, gpioModePushPull, 0);
	// Button stuff
	GPIO_PinModeSet(BSP_BUTTON0_PORT, BSP_BUTTON0_PIN, gpioModeInputPullFilter,
			1);
	GPIOINT_Init();
	printLog("initgpio setup callback\r\n");
	GPIOINT_CallbackRegister(BSP_BUTTON0_PIN, button0Callback);
	GPIO_ExtIntConfig(BSP_BUTTON0_PORT, BSP_BUTTON0_PIN, BSP_BUTTON0_PIN, false,
	true, true);
}

void initCmu(void) {
	// Enable clock to GPIO and TIMER0
	CMU_ClockEnable(cmuClock_GPIO, true);
	CMU_ClockEnable(cmuClock_TIMER0, true);
}

#define PWM_FREQ 220
// Buffer size
#define BUFFER_SIZE 11
static const uint16_t dutyCyclePercentages[BUFFER_SIZE] =
// { 5, 8, 10, 10, 8, 5, 2, 0, 0, 2 };
// {0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100};
// {100, 0, 100, 0, 100, 0, 100, 0, 100, 0, 100};
		{ 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50 };

// Buffer of duty cycle values for DMA transfer to CCVB
// Buffer is populated after TIMER is initialized and Top value is set
static uint16_t buffer[BUFFER_SIZE];

void populateBuffer(void) {
	for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
		buffer[i] = (uint16_t) (TIMER_TopGet(TIMER0) * dutyCyclePercentages[i]
				/ 100);
	}
}

void initTimer(void) {
	// Initialize and start timer with no prescaling
	TIMER_Init_TypeDef timerInit = TIMER_INIT_DEFAULT;
	// Configure TIMER0 Compare/Capture for output compare
	TIMER_InitCC_TypeDef timerCCInit = TIMER_INITCC_DEFAULT;

	// Use PWM mode, which sets output on overflow and clears on compare events
	timerInit.enable = false;
	timerCCInit.mode = timerCCModePWM;

	// Configure but do not start the timer
	TIMER_Init(TIMER0, &timerInit);

	// Route Timer0 CC0 output to PA6
	GPIO->TIMERROUTE[0].ROUTEEN = GPIO_TIMER_ROUTEEN_CC0PEN;
	GPIO->TIMERROUTE[0].CC0ROUTE =
			(gpioPortD << _GPIO_TIMER_CC0ROUTE_PORT_SHIFT)
					| (3 << _GPIO_TIMER_CC0ROUTE_PIN_SHIFT);
	/*
	 (gpioPortA << _GPIO_TIMER_CC0ROUTE_PORT_SHIFT)
	 | (6 << _GPIO_TIMER_CC0ROUTE_PIN_SHIFT);
	 */
	TIMER_InitCC(TIMER0, 0, &timerCCInit);

	// Set top value to overflow at the desired PWM_FREQ frequency
	TIMER_TopSet(TIMER0, CMU_ClockFreqGet(cmuClock_TIMER0) / PWM_FREQ);

	// Start the timer
	// TIMER_Enable(TIMER0, true);

	// Trigger DMA on compare event to set CCVB to update duty cycle on next period
	TIMER_IntEnable(TIMER0, TIMER_IEN_CC0);
}

void initLdma(void) {

	// LDMA initialization
	LDMA_Init_t init = LDMA_INIT_DEFAULT;
	LDMA_Init(&init);
}
unsigned int channel;
bool dma_cb(unsigned int channel, unsigned int sequenceNo, void *userParam) {
	printLog("dma_cb: channel %d, sequenceNo %d\r\n", channel, sequenceNo);
	TIMER_Enable(TIMER0, false);

	return 0;
}
void startLDMA(void) {
	// Start the transfer
	uint32_t channelNum = 0;
	// Transfer configuration and trigger selection
	LDMA_TransferCfg_t transferConfig =
	LDMA_TRANSFER_CFG_PERIPHERAL(ldmaPeripheralSignal_TIMER0_CC0);

	// Channel descriptor configuration
	static LDMA_Descriptor_t descriptor =
	LDMA_DESCRIPTOR_SINGLE_M2P_BYTE(&buffer,           // Memory source address
			&TIMER0->CC[0].OCB,// Peripheral destination address
			BUFFER_SIZE);
	//,// Number of bytes per transfer
	//0);                  // Link to same descriptor
	descriptor.xfer.size = ldmaCtrlSizeHalf; // Unit transfer size
	descriptor.xfer.doneIfs = 0;            // Don't trigger interrupt when done

	// LDMA_StartTransfer(channelNum, &transferConfig, &descriptor);
	DMADRV_LdmaStartTransfer(channel, &transferConfig, &descriptor, dma_cb,
			NULL);

}

void enableDebugGpios(GPIO_Port_TypeDef rx_obs_port, uint8_t rx_obs_pin,
		GPIO_Port_TypeDef tx_obs_port, uint8_t tx_obs_pin) {
	// Turn on the PRS and GPIO clocks to access their registers.
	// Configure pins as output.
	GPIO_PinModeSet(rx_obs_port, rx_obs_pin, gpioModePushPull, 0);
	GPIO_PinModeSet(tx_obs_port, tx_obs_pin, gpioModePushPull, 0);

#ifdef _SILICON_LABS_32B_SERIES_2

	// Configure PRS Channel 0 to output RAC_RX.
	PRS_SourceAsyncSignalSet(0, PRS_ASYNC_CH_CTRL_SOURCESEL_RACL,
			_PRS_ASYNC_CH_CTRL_SIGSEL_RACLRX);
	PRS_PinOutput(RX_OBS_PRS_CHANNEL, prsTypeAsync, rx_obs_port, rx_obs_pin);

	/* Configure PRS Channel 0 to output RAC_RX.*/
	PRS_SourceAsyncSignalSet(1, PRS_ASYNC_CH_CTRL_SOURCESEL_RACL,
			_PRS_ASYNC_CH_CTRL_SIGSEL_RACLTX);
	PRS_PinOutput(TX_OBS_PRS_CHANNEL, prsTypeAsync, tx_obs_port, tx_obs_pin);
#elif defined(_SILICON_LABS_32B_SERIES_1)
	if((tx_obs_port != gpioPortF)||(rx_obs_port != gpioPortF)) {
		return;
	}
	if(rx_obs_port == gpioPortF) {
		ch0_loc = rx_obs_pin;
	}

	/*set the radio RX active to channel 0*/
	PRS_SourceAsyncSignalSet(RX_OBS_PRS_CHANNEL,
			PRS_RAC_RX,
			((PRS_RAC_RX & _PRS_CH_CTRL_SIGSEL_MASK)>> _PRS_CH_CTRL_SIGSEL_SHIFT));
	/* set the location for channel0 and enable it*/
	PRS_GpioOutputLocation(RX_OBS_PRS_CHANNEL,/*ch0_loc*/rx_obs_pin);

	/*set radio Tx active to channel 1.
	 * channel 1. Locations can be 0 - 7*/
	PRS_SourceAsyncSignalSet(TX_OBS_PRS_CHANNEL,
			(PRS_RAC_RX & _PRS_CH_CTRL_SOURCESEL_MASK),
			((PRS_RAC_RX & _PRS_CH_CTRL_SIGSEL_MASK)>> _PRS_CH_CTRL_SIGSEL_SHIFT));

	/*for series 1 PRS channel 1 can only be output on port F so the pin number minus 1 equates to the location*/
	PRS_GpioOutputLocation(TX_OBS_PRS_CHANNEL,tx_obs_pin-1);
#endif
}
/* Print boot message */
static void bootMessage(struct gecko_msg_system_boot_evt_t *bootevt);

/* Flag for indicating DFU Reset must be performed */
static uint8_t boot_to_dfu = 0;

/* Main application */
void appMain(gecko_configuration_t *pconfig) {
#if DISABLE_SLEEP > 0
	pconfig->sleep.flags = 0;
#endif

	/* Initialize debug prints. Note: debug prints are off by default. See DEBUG_LEVEL in app.h */
	initLog();
	initGpio();
	initCmu();
	initTimer();

	// Initialize DMA only after buffer is populated
	populateBuffer();
	DMADRV_Init();
	// Request a DMA channel.

	// TIMER_Enable(TIMER0, true);

	/* Initialize stack */
	gecko_init(pconfig);

	while (1) {
		/* Event pointer for handling events */
		struct gecko_cmd_packet* evt;

		/* if there are no events pending then the next call to gecko_wait_event() may cause
		 * device go to deep sleep. Make sure that debug prints are flushed before going to sleep */
		if (!gecko_event_pending()) {
			flushLog();
		}

		/* Check for stack event. This is a blocking event listener. If you want non-blocking please see UG136. */
		evt = gecko_wait_event();

		/* Handle events */
		switch (BGLIB_MSG_ID(evt->header)) {
		/* This boot event is generated when the system boots up after reset.
		 * Do not call any stack commands before receiving the boot event.
		 * Here the system is set to start advertising immediately after boot procedure. */
		case gecko_evt_system_boot_id:

			bootMessage(&(evt->data.evt_system_boot));
			printLog("boot event - starting advertising\r\n");
			//enableDebugGpios(gpioPortB, 0, gpioPortB, 0);
			/* Set advertising parameters. 100ms advertisement interval.
			 * The first parameter is advertising set handle
			 * The next two parameters are minimum and maximum advertising interval, both in
			 * units of (milliseconds * 1.6).
			 * The last two parameters are duration and maxevents left as default. */
			uint32_t e = DMADRV_AllocateChannel(&channel, NULL);

			printLog("DMADRV channel %d, retcode: %lu\r\n", channel, e);
			// initLdma();
			startLDMA();
			gecko_cmd_le_gap_set_advertise_timing(0, 10 * 160, 10 * 160, 0, 0);

			/* Start general advertising and enable connections. */
			gecko_cmd_le_gap_start_advertising(0, le_gap_general_discoverable,
					le_gap_connectable_scannable);
			break;

		case gecko_evt_le_connection_opened_id:

			printLog("connection opened\r\n");
			GPIO_PinModeSet(gpioPortB, 0, gpioModePushPull, 1);

			break;

		case gecko_evt_le_connection_closed_id:

			printLog("connection closed, reason: 0x%2.2x\r\n",
					evt->data.evt_le_connection_closed.reason);
			GPIO_PinModeSet(gpioPortB, 0, gpioModePushPull, 0);

			/* Check if need to boot to OTA DFU mode */
			if (boot_to_dfu) {
				/* Enter to OTA DFU mode */
				gecko_cmd_system_reset(2);
			} else {
				/* Restart advertising after client has disconnected */
				gecko_cmd_le_gap_start_advertising(0,
						le_gap_general_discoverable,
						le_gap_connectable_scannable);
			}
			break;

			/* Events related to OTA upgrading
			 ----------------------------------------------------------------------------- */

			/* Check if the user-type OTA Control Characteristic was written.
			 * If ota_control was written, boot the device into Device Firmware Upgrade (DFU) mode. */
		case gecko_evt_gatt_server_user_write_request_id:

			if (evt->data.evt_gatt_server_user_write_request.characteristic
					== gattdb_ota_control) {
				/* Set flag to enter to OTA mode */
				boot_to_dfu = 1;
				/* Send response to Write Request */
				gecko_cmd_gatt_server_send_user_write_response(
						evt->data.evt_gatt_server_user_write_request.connection,
						gattdb_ota_control, bg_err_success);

				/* Close connection to enter to DFU OTA mode */
				gecko_cmd_le_connection_close(
						evt->data.evt_gatt_server_user_write_request.connection);
			}
			break;

			/* Add additional event handlers as your application requires */

		default:
			break;
		}
	}
}

/* Print stack version and local Bluetooth address as boot message */
static void bootMessage(struct gecko_msg_system_boot_evt_t *bootevt) {
#if DEBUG_LEVEL
	bd_addr local_addr;
	int i;

	printLog("stack version: %u.%u.%u\r\n", bootevt->major, bootevt->minor,
			bootevt->patch);
	local_addr = gecko_cmd_system_get_bt_address()->address;

	printLog("local BT device address: ");
	for (i = 0; i < 5; i++) {
		printLog("%2.2x:", local_addr.addr[5 - i]);
	}
	printLog("%2.2x\r\n", local_addr.addr[0]);
#endif
}
